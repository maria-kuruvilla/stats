library(readr)
HW2_sequoia <- read_csv("HW2_sequoia.csv")
View(HW2_sequoia)
require(xtable)
cones <- HW2_sequoia$cones
rain <- HW2_sequoia$rain
canopy1 <- HW2_sequoia$canopy1
canopy2 <- HW2_sequoia$canopy2
elevation <- HW2_sequoia$elev
plot(elevation,cones)
n <- length(HW2_sequoia$cones)
conesdata <- as.data.frame(cbind(sample = (1:n),cones,rain,canopy1,canopy2,elevation))
model <- lm(cones ~ rain + canopy1 + canopy2 + elevation,conesdata)
xtable(summary(model), type = "latex")
#get the X design matrix
X <- cbind(rep(1,n),rain,canopy1,canopy2,elevation)
#get the y response variable
y <- cones
inv.xtx <- solve(t(X)%*%X)
#estimates of beta (parameters)
beta.hat <- inv.xtx%*%t(X)%*%y
#the hat matrix
hat.matrix <- X%*%inv.xtx%*%t(X)
#estimates of y.hat using the hat matrix (model predictions)
y.hat <- hat.matrix%*%y
ymean <- mean(y)
squares <- (y.hat-ymean)^2
mss <- sum(squares)
tss <- sum((y-ymean)^2)
rss <- sum((y-y.hat)^2)
f <- ((tss-rss)/3)/(rss/43)
pf(f,3,43,lower.tail = F)
nreps <- 100000
fstats <- numeric(nreps)
for(i in 1:nreps){
lmods <- lm(sample(cones) ~ rain+canopy1+canopy2+elevation, data = conesdata)
fstats[i] <- summary(lmods)$fstat[1]
}
length(fstats[fstats>summary(lmods)$fstat[1]])/nreps
model1 <- lm(cones ~ rain + I(canopy1 + canopy2) + elevation,conesdata)
anova(model1,model)
nreps <- 10
fstats <- numeric(nreps)
for(i in 1:nreps){
lmods <- lm(sample(cones) ~ rain+canopy1+canopy2+elevation, data = conesdata)
fstats[i] <- summary(lmods)$fstat[1]
}
length(fstats[fstats>summary(lmods)$fstat[1]])/nreps
nreps <- 10
fstats <- numeric(nreps)
for(i in 1:nreps){
lmods <- lm(sample(cones) ~ rain+canopy1+canopy2+elevation, data = conesdata)
fstats[i] <- summary(lmods)$fstat[1]
}
length(fstats[fstats>summary(lmods)$fstat[1]])/nreps
nreps <- 10
fstats <- numeric(nreps)
for(i in 1:nreps){
lmods <- lm(sample(cones) ~ rain+canopy1+canopy2+elevation, data = conesdata)
fstats[i] <- summary(lmods)$fstat[1]
}
length(fstats[fstats>summary(lmods)$fstat[1]])/nreps
nreps <- 100
fstats <- numeric(nreps)
for(i in 1:nreps){
lmods <- lm(sample(cones) ~ rain+canopy1+canopy2+elevation, data = conesdata)
fstats[i] <- summary(lmods)$fstat[1]
}
length(fstats[fstats>summary(lmods)$fstat[1]])/nreps
nreps <- 1000
fstats <- numeric(nreps)
for(i in 1:nreps){
lmods <- lm(sample(cones) ~ rain+canopy1+canopy2+elevation, data = conesdata)
fstats[i] <- summary(lmods)$fstat[1]
}
length(fstats[fstats>summary(lmods)$fstat[1]])/nreps
nreps <- 10000
fstats <- numeric(nreps)
for(i in 1:nreps){
lmods <- lm(sample(cones) ~ rain+canopy1+canopy2+elevation, data = conesdata)
fstats[i] <- summary(lmods)$fstat[1]
}
length(fstats[fstats>summary(lmods)$fstat[1]])/nreps
model1 <- lm(cones ~ rain + I(canopy1 + canopy2) + elevation,conesdata)
anova(model1,model)
View(model1)
model1$residuals
model1$residuals^2
sum(model1$residuals^2)
2*5
View(model1)
View(model)
f2 <- (res1-res)*42/res
res1 <- sum(model1$residuals^2)
res <- sum(model$residuals^2)
f2 <- (res1-res)*42/res
pf(f2,1,42,lower.tail = F)
#f statistic
f <- ((tss-rss)/4)/(rss/42)
#p value
pf(f,3,43,lower.tail = F)
#f statistic
f <- ((tss-rss)/4)/(rss/42)
#p value
pf(f,4,42,lower.tail = F)
model3 <- lm(cones ~ -1 + elevation,conesdata)
View(model3)
View(model3)
confint(model3)
?qt
summary(model3)
?confint
confint(model3,level = 0.95)
confint(model3,level = 0.9)
xtable(confint(model3), type = "latex")
xtable(confint(model3,level = 0.95), type = "latex")
xtable(confint(model3,level = 0.9), type = "latex")
summary(model3)
nreps <- 10000
fstats <- numeric(nreps)
for(i in 1:nreps){
lmods <- lm(sample(cones) ~ rain+canopy1+canopy2+elevation, data = conesdata)
fstats[i] <- summary(lmods)$fstat[1]
}
length(fstats[fstats>summary(lmods)$fstat[1]])/nreps
?plot
setwd("~/Documents/code/temp_collective_code")
setwd("~/Documents/code/stats")
setwd("~/code/stats")
stats_speed <- read.csv("stats_peed.csv",header=TRUE,na.strings=c("[nan]"))
stats_speed <- read.csv("stats_speed.csv",header=TRUE,na.strings=c("[nan]"))
speed <- stats_speed$`90_speed`
temp <- stats_speed$Temperature
gs <- stats_speed$Groupsize
n <- length(stats_speed$`90_speed`)
speed_data <- as.data.frame(cbind(sample = (1:n),speed,temp,gs))
View(stats_speed)
speed <- stats_speed$X90_speed
temp <- stats_speed$Temperature
gs <- stats_speed$Groupsize
n <- length(stats_speed$X90_speed
)
model <- lm(speed ~ temp + gs,speed_data)
summary(model)
plot(fitted(model), residuals(model))
plot(temp, residuals(model))
plot(gs, residuals(model))
plot(fitted(model), residuals(model))
qqnorm(residuals(model))
qqline(residuals(model))
shapiro.test(residuals(model))
model_int <- lm(speed ~ temp*gs,speed_data)
summary(model_int)
plot(fitted(model_int), residuals(model_int))
qqnorm(residuals(model_int))
qqline(residuals(model_int))
require(MASS)
boxcox(model_int,plotit=TRUE)
require(MASS)
boxcox(model,plotit=TRUE)
model_exp <- lm(log(speed) ~ temp + gs,speed_data)
summary(model_exp)
plot(fitted(model_exp), residuals(model_exp))
qqnorm(residuals(model_exp))
qqline(residuals(model_exp))
shapiro.test(residuals(model_exp))
model_exp_inv <- lm(log(speed) ~ temp*gs,speed_data)
summary(model_exp_inv)
plot(fitted(model_exp_inv), residuals(model_exp_inv))
qqnorm(residuals(model_exp_inv))
qqline(residuals(model_exp_inv))
shapiro.test(residuals(model_exp_inv))
library(readr)
stats_speed_acc_latency <- read_csv("stats_speed_acc_latency.csv")
View(stats_speed_acc_latency)
acc <- stats_speed_acc_latency$`90_acc`
lat <- stats_speed_acc_latency$latency
temp <- stats_speed_acc_latency$Temperature
gs <- stats_speed_acc_latency$Groupsize
n <- length(stats_speed_acc_latency$`90_acc`)
data <- as.data.frame(cbind(sample = (1:n),temp,gs,acc,lat))
model_acc <- lm(acc ~ temp + gs,data)
summary(model_acc)
plot(fitted(model_acc), residuals(model_acc))
qqnorm(residuals(model_acc))
qqline(residuals(model_acc))
shapiro.test(residuals(model_acc))
model_acc_int <- lm(acc ~ temp*gs,data)
summary(model_acc_int)
plot(fitted(model_acc_int), residuals(model_acc_int))
qqnorm(residuals(model_acc_int))
qqline(residuals(model_acc_int))
shapiro.test(residuals(model_acc_int))
boxcox(model_acc,plotit=TRUE)
boxcox(model_acc_int,plotit=TRUE)
model_inv <- lm(acc^(-1) ~ temp + gs,speed_data)
summary(model_inv)
plot(fitted(model_inv), residuals(model_inv))
qqnorm(residuals(model_inv))
qqline(residuals(model_inv))
shapiro.test(residuals(model_exp))
model_inv_int <- lm(acc^(-1) ~ temp*gs,speed_data)
summary(model_inv_int)
plot(fitted(model_inv_int), residuals(model_inv_int))
qqnorm(residuals(model_inv_int))
qqline(residuals(model_inv_int))
model_glm_int <- glm(speed ~ temp*gs, family = Gamma)
summary(model_glm_int,dispersion=1)
speed <- stats_speed$X90_speed
temp <- stats_speed$Temperature
gs <- stats_speed$Groupsize
n <- length(stats_speed$X90_speed)
speed_data <- as.data.frame(cbind(sample = (1:n),speed,temp,gs))
model <- lm(speed ~ temp + gs,speed_data)
summary(model)
plot(fitted(model), residuals(model))
qqnorm(residuals(model))
qqline(residuals(model))
shapiro.test(residuals(model))
model_int <- lm(speed ~ temp*gs,speed_data)
summary(model_int)
plot(fitted(model_int), residuals(model_int))
qqnorm(residuals(model_int))
qqline(residuals(model_int))
require(MASS)
boxcox(model,plotit=TRUE)
model_exp <- lm(log(speed) ~ temp + gs,speed_data)
summary(model_exp)
plot(fitted(model_exp), residuals(model_exp))
qqnorm(residuals(model_exp))
qqline(residuals(model_exp))
shapiro.test(residuals(model_exp))
model_exp_inv <- lm(log(speed) ~ temp*gs,speed_data)
summary(model_exp_inv)
plot(fitted(model_exp_inv), residuals(model_exp_inv))
acc <- stats_speed_acc_latency$`90_acc`
lat <- stats_speed_acc_latency$latency
temp <- stats_speed_acc_latency$Temperature
gs <- stats_speed_acc_latency$Groupsize
n <- length(stats_speed_acc_latency$`90_acc`)
data <- as.data.frame(cbind(sample = (1:n),temp,gs,acc,lat))
model_acc <- lm(acc ~ temp + gs,data)
summary(model_acc)
plot(fitted(model_acc), residuals(model_acc))
qqnorm(residuals(model_acc))
qqline(residuals(model_acc))
shapiro.test(residuals(model_acc))
boxcox(model_acc,plotit=TRUE)
model_inv <- lm(acc^(-1) ~ temp + gs,speed_data)
summary(model_inv)
plot(fitted(model_inv), residuals(model_inv))
model_x <- lm(acc ~ temp + I(temp^2) + gs, data)
summary(model_x)
model_glm_int <- glm(speed ~ temp*gs, family = Gamma)
summary(model_glm_int,dispersion=1)
acc <- stats_speed_acc_latency$`90_acc`
lat <- stats_speed_acc_latency$latency
temp <- stats_speed_acc_latency$Temperature
gs <- stats_speed_acc_latency$Groupsize
n <- length(stats_speed_acc_latency$latency)
data <- as.data.frame(cbind(sample = (1:n),temp,gs,acc,lat))
model_lat <- lm(lat ~ temp + gs,data)
summary(model_lat)
plot(fitted(model_lat), residuals(model_lat))
qqnorm(residuals(model_lat))
qqline(residuals(model_lat))
